{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"cesiumContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAiB;;uBAAzBC,oBAAgC,OAAhCC,UAAgC","names":["id","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/opt/lampp/htdocs/LearnCesium/project1/src/components/3Dtiles.vue"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n<script setup>\nimport { onMounted } from \"vue\";\n//方法二，直接调用函数，调整高度,height表示物体离地面的高度\nfunction changeHeight(height) {\n  height = Number(height);\n  if (isNaN(height)) {\n    return;\n  }\n  var cartographic = Cesium.Cartographic.fromCartesian(\n    tileset.boundingSphere.center\n  );\n  var surface = Cesium.Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    cartographic.height\n  );\n  var offset = Cesium.Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    height\n  );\n  var translation = Cesium.Cartesian3.subtract(\n    offset,\n    surface,\n    new Cesium.Cartesian3()\n  );\n  tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n}\n\nonMounted(() => {\n  const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n    homeButton: false,\n    animation: false,\n    navigationHelpButton: false,\n    baseLayerPicker: false,\n    timeline: false,\n    geocoder: false,\n    sceneModePicker: false,\n    fullscreenButton: false,\n    // vrButton: true,\n  });\n  //显示帧率\n  viewer.scene.debugShowFramesPerSecond = true;\n  //加载3d tiles\n  var tileset = viewer.scene.primitives.add(\n    new Cesium.Cesium3DTileset({\n      url: \"./tileData/Scene/Production_4.json\", //数据路径\n      maximumScreenSpaceError: 2, //最大的屏幕空间误差\n      maximumNumberOfLoadedTiles: 1000, //最大加载瓦片个数\n      // modelMatrix: m, //形状矩阵\n    })\n  );\n\n  //创建平移矩阵方法一\n  // m = Cesium.Matrix4.fromArray([\n  // 1.0, 0.0, 0.0, 0.0,\n  // 0.0, 1.0, 0.0, 0.0,\n  // 0.0, 0.0, 1.0, 0.0,\n  // x, y, z, 1.0\n  // ]);\n\n  //   //创建平移矩阵方法二\n  //   var translation = Cesium.Cartesian3.fromArray([0, 0, 1000000]);\n  //   const m = Cesium.Matrix4.fromTranslation(translation);\n\n  //   //生效\n  //   tileset._modelMatrix = m;\n\n  //移动到表面\n  const height = Number(0);\n\n  height = Number(height);\n  if (isNaN(height)) {\n    return;\n  }\n\n  const cartographic = Cesium.Cartographic.fromCartesian(\n    tileset.boundingSphere.center\n  );\n  const surface = Cesium.Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    0.0\n  );\n  const offset = Cesium.Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    height\n  );\n  const translation = Cesium.Cartesian3.subtract(\n    offset,\n    surface,\n    new Cesium.Cartesian3()\n  );\n  tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n  //移动到形状\n  viewer.zoomTo(tileset);\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}