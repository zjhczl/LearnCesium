{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"cesiumContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAiB;;uBAAzBC,oBAAgC,OAAhCC,UAAgC","names":["id","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["C:\\Users\\DELL\\Desktop\\cx\\LearnCesium\\src\\components\\3Dtiles.vue"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n<script setup>\r\nimport { onMounted } from \"vue\";\r\n\r\nonMounted(() => {\r\n  const viewer = new Cesium.Viewer(\"cesiumContainer\", {\r\n    homeButton: false,\r\n    animation: false,\r\n    navigationHelpButton: false,\r\n    baseLayerPicker: false,\r\n    timeline: false,\r\n    geocoder: false,\r\n    sceneModePicker: false,\r\n    fullscreenButton: false,\r\n    // vrButton: true,\r\n  });\r\n  //显示帧率\r\n  viewer.scene.debugShowFramesPerSecond = true;\r\n  //加载3d tiles\r\n  var tileset = new Cesium.Cesium3DTileset({\r\n    url: \"./tileData/Scene/Production_5.json\", //数据路径\r\n    maximumScreenSpaceError: 2, //最大的屏幕空间误差\r\n    maximumNumberOfLoadedTiles: 1000, //最大加载瓦片个数\r\n    // modelMatrix: m, //形状矩阵\r\n  });\r\n  //创建平移矩阵方法一\r\n  // m = Cesium.Matrix4.fromArray([\r\n  // 1.0, 0.0, 0.0, 0.0,\r\n  // 0.0, 1.0, 0.0, 0.0,\r\n  // 0.0, 0.0, 1.0, 0.0,\r\n  // x, y, z, 1.0\r\n  // ]);\r\n\r\n  //   //创建平移矩阵方法二\r\n  //   var translation = Cesium.Cartesian3.fromArray([0, 0, 1000000]);\r\n  //   const m = Cesium.Matrix4.fromTranslation(translation);\r\n\r\n  //   //生效\r\n  //   tileset._modelMatrix = m;\r\n\r\n  tileset.readyPromise\r\n    .then(function (tileset) {\r\n      viewer.scene.primitives.add(tileset);\r\n\r\n      //移动到表面\r\n      const height = Number(-37);\r\n      const cartographic = Cesium.Cartographic.fromCartesian(\r\n        tileset.boundingSphere.center\r\n      );\r\n      const surface = Cesium.Cartesian3.fromRadians(\r\n        cartographic.longitude,\r\n        cartographic.latitude,\r\n        0.0\r\n      );\r\n      const offset = Cesium.Cartesian3.fromRadians(\r\n        cartographic.longitude,\r\n        cartographic.latitude,\r\n        height\r\n      );\r\n      const translation = Cesium.Cartesian3.subtract(\r\n        offset,\r\n        surface,\r\n        new Cesium.Cartesian3()\r\n      );\r\n      tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\r\n      viewer.flyTo(\r\n        tileset,\r\n        new Cesium.HeadingPitchRange(\r\n          0.0,\r\n          -0.5,\r\n          tileset.boundingSphere.radius * 2.0\r\n        )\r\n      );\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n});\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}