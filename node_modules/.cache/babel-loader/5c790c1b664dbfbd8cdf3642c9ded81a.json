{"ast":null,"code":"import { onMounted } from \"vue\";\n//方法二，直接调用函数，调整高度,height表示物体离地面的高度\n\nexport default {\n  __name: '3Dtiles',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    function changeHeight(height) {\n      height = Number(height);\n      if (isNaN(height)) {\n        return;\n      }\n      var cartographic = Cesium.Cartographic.fromCartesian(tileset.boundingSphere.center);\n      var surface = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);\n      var offset = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, height);\n      var translation = Cesium.Cartesian3.subtract(offset, surface, new Cesium.Cartesian3());\n      tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n    }\n    onMounted(() => {\n      const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n        homeButton: false,\n        animation: false,\n        navigationHelpButton: false,\n        baseLayerPicker: false,\n        timeline: false,\n        geocoder: false,\n        sceneModePicker: false,\n        fullscreenButton: false\n        // vrButton: true,\n      });\n      //显示帧率\n      viewer.scene.debugShowFramesPerSecond = true;\n      //加载3d tiles\n      var tileset = new Cesium.Cesium3DTileset({\n        url: \"./tileData/Scene/Production_4.json\",\n        //数据路径\n        maximumScreenSpaceError: 2,\n        //最大的屏幕空间误差\n        maximumNumberOfLoadedTiles: 1000 //最大加载瓦片个数\n        // modelMatrix: m, //形状矩阵\n      });\n      //创建平移矩阵方法一\n      // m = Cesium.Matrix4.fromArray([\n      // 1.0, 0.0, 0.0, 0.0,\n      // 0.0, 1.0, 0.0, 0.0,\n      // 0.0, 0.0, 1.0, 0.0,\n      // x, y, z, 1.0\n      // ]);\n\n      //   //创建平移矩阵方法二\n      //   var translation = Cesium.Cartesian3.fromArray([0, 0, 1000000]);\n      //   const m = Cesium.Matrix4.fromTranslation(translation);\n\n      //   //生效\n      //   tileset._modelMatrix = m;\n\n      tileset.readyPromise.then(function (tileset) {\n        viewer.scene.primitives.add(tileset);\n        viewer.zoomTo(tileset, new Cesium.HeadingPitchRange(0.0, -0.5, tileset.boundingSphere.radius * 2.0));\n\n        //移动到表面\n        const height = Number(0);\n        const cartographic = Cesium.Cartographic.fromCartesian(tileset.boundingSphere.center);\n        //   const surface = Cesium.Cartesian3.fromRadians(\n        //     cartographic.longitude,\n        //     cartographic.latitude,\n        //     0.0\n        //   );\n        //   const offset = Cesium.Cartesian3.fromRadians(\n        //     cartographic.longitude,\n        //     cartographic.latitude,\n        //     height\n        //   );\n        //   const translation = Cesium.Cartesian3.subtract(\n        //     offset,\n        //     surface,\n        //     new Cesium.Cartesian3()\n        //   );\n        //   tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    });\n    const __returned__ = {\n      changeHeight,\n      onMounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,KAAK;AAC/B;;;;;;;;IACA,SAASC,YAAY,CAACC,MAAM,EAAE;MAC5BA,MAAM,GAAGC,MAAM,CAACD,MAAM,CAAC;MACvB,IAAIE,KAAK,CAACF,MAAM,CAAC,EAAE;QACjB;MACF;MACA,IAAIG,YAAY,GAAGC,MAAM,CAACC,YAAY,CAACC,aAAa,CAClDC,OAAO,CAACC,cAAc,CAACC,MAAM,CAC9B;MACD,IAAIC,OAAO,GAAGN,MAAM,CAACO,UAAU,CAACC,WAAW,CACzCT,YAAY,CAACU,SAAS,EACtBV,YAAY,CAACW,QAAQ,EACrBX,YAAY,CAACH,MAAM,CACpB;MACD,IAAIe,MAAM,GAAGX,MAAM,CAACO,UAAU,CAACC,WAAW,CACxCT,YAAY,CAACU,SAAS,EACtBV,YAAY,CAACW,QAAQ,EACrBd,MAAM,CACP;MACD,IAAIgB,WAAW,GAAGZ,MAAM,CAACO,UAAU,CAACM,QAAQ,CAC1CF,MAAM,EACNL,OAAO,EACP,IAAIN,MAAM,CAACO,UAAU,EAAE,CACxB;MACDJ,OAAO,CAACW,WAAW,GAAGd,MAAM,CAACe,OAAO,CAACC,eAAe,CAACJ,WAAW,CAAC;IACnE;IAEAlB,SAAS,CAAC,MAAM;MACd,MAAMuB,MAAM,GAAG,IAAIjB,MAAM,CAACkB,MAAM,CAAC,iBAAiB,EAAE;QAClDC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,KAAK;QAChBC,oBAAoB,EAAE,KAAK;QAC3BC,eAAe,EAAE,KAAK;QACtBC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,KAAK;QACfC,eAAe,EAAE,KAAK;QACtBC,gBAAgB,EAAE;QAClB;MACF,CAAC,CAAC;MACF;MACAT,MAAM,CAACU,KAAK,CAACC,wBAAwB,GAAG,IAAI;MAC5C;MACA,IAAIzB,OAAO,GAAG,IAAIH,MAAM,CAAC6B,eAAe,CAAC;QACvCC,GAAG,EAAE,oCAAoC;QAAE;QAC3CC,uBAAuB,EAAE,CAAC;QAAE;QAC5BC,0BAA0B,EAAE,IAAI,CAAE;QAClC;MACF,CAAC,CAAC;MACF;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;;MAEA7B,OAAO,CAAC8B,YAAY,CACjBC,IAAI,CAAC,UAAU/B,OAAO,EAAE;QACvBc,MAAM,CAACU,KAAK,CAACQ,UAAU,CAACC,GAAG,CAACjC,OAAO,CAAC;QACpCc,MAAM,CAACoB,MAAM,CACXlC,OAAO,EACP,IAAIH,MAAM,CAACsC,iBAAiB,CAC1B,GAAG,EACH,CAAC,GAAG,EACJnC,OAAO,CAACC,cAAc,CAACmC,MAAM,GAAG,GAAG,CACpC,CACF;;QAED;QACA,MAAM3C,MAAM,GAAGC,MAAM,CAAC,CAAC,CAAC;QACxB,MAAME,YAAY,GAAGC,MAAM,CAACC,YAAY,CAACC,aAAa,CACpDC,OAAO,CAACC,cAAc,CAACC,MAAM,CAC9B;QACD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC,CAAC,CACDmC,KAAK,CAAC,UAAUC,KAAK,EAAE;QACtBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,CAAC","names":["onMounted","changeHeight","height","Number","isNaN","cartographic","Cesium","Cartographic","fromCartesian","tileset","boundingSphere","center","surface","Cartesian3","fromRadians","longitude","latitude","offset","translation","subtract","modelMatrix","Matrix4","fromTranslation","viewer","Viewer","homeButton","animation","navigationHelpButton","baseLayerPicker","timeline","geocoder","sceneModePicker","fullscreenButton","scene","debugShowFramesPerSecond","Cesium3DTileset","url","maximumScreenSpaceError","maximumNumberOfLoadedTiles","readyPromise","then","primitives","add","zoomTo","HeadingPitchRange","radius","catch","error","console","log"],"sources":["/opt/lampp/htdocs/LearnCesium/project1/src/components/3Dtiles.vue"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n<script setup>\nimport { onMounted } from \"vue\";\n//方法二，直接调用函数，调整高度,height表示物体离地面的高度\nfunction changeHeight(height) {\n  height = Number(height);\n  if (isNaN(height)) {\n    return;\n  }\n  var cartographic = Cesium.Cartographic.fromCartesian(\n    tileset.boundingSphere.center\n  );\n  var surface = Cesium.Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    cartographic.height\n  );\n  var offset = Cesium.Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    height\n  );\n  var translation = Cesium.Cartesian3.subtract(\n    offset,\n    surface,\n    new Cesium.Cartesian3()\n  );\n  tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n}\n\nonMounted(() => {\n  const viewer = new Cesium.Viewer(\"cesiumContainer\", {\n    homeButton: false,\n    animation: false,\n    navigationHelpButton: false,\n    baseLayerPicker: false,\n    timeline: false,\n    geocoder: false,\n    sceneModePicker: false,\n    fullscreenButton: false,\n    // vrButton: true,\n  });\n  //显示帧率\n  viewer.scene.debugShowFramesPerSecond = true;\n  //加载3d tiles\n  var tileset = new Cesium.Cesium3DTileset({\n    url: \"./tileData/Scene/Production_4.json\", //数据路径\n    maximumScreenSpaceError: 2, //最大的屏幕空间误差\n    maximumNumberOfLoadedTiles: 1000, //最大加载瓦片个数\n    // modelMatrix: m, //形状矩阵\n  });\n  //创建平移矩阵方法一\n  // m = Cesium.Matrix4.fromArray([\n  // 1.0, 0.0, 0.0, 0.0,\n  // 0.0, 1.0, 0.0, 0.0,\n  // 0.0, 0.0, 1.0, 0.0,\n  // x, y, z, 1.0\n  // ]);\n\n  //   //创建平移矩阵方法二\n  //   var translation = Cesium.Cartesian3.fromArray([0, 0, 1000000]);\n  //   const m = Cesium.Matrix4.fromTranslation(translation);\n\n  //   //生效\n  //   tileset._modelMatrix = m;\n\n  tileset.readyPromise\n    .then(function (tileset) {\n      viewer.scene.primitives.add(tileset);\n      viewer.zoomTo(\n        tileset,\n        new Cesium.HeadingPitchRange(\n          0.0,\n          -0.5,\n          tileset.boundingSphere.radius * 2.0\n        )\n      );\n\n      //移动到表面\n      const height = Number(0);\n      const cartographic = Cesium.Cartographic.fromCartesian(\n        tileset.boundingSphere.center\n      );\n      //   const surface = Cesium.Cartesian3.fromRadians(\n      //     cartographic.longitude,\n      //     cartographic.latitude,\n      //     0.0\n      //   );\n      //   const offset = Cesium.Cartesian3.fromRadians(\n      //     cartographic.longitude,\n      //     cartographic.latitude,\n      //     height\n      //   );\n      //   const translation = Cesium.Cartesian3.subtract(\n      //     offset,\n      //     surface,\n      //     new Cesium.Cartesian3()\n      //   );\n      //   tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}