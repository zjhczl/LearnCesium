{"ast":null,"code":"import { createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div id=\\\"cesiumContainer\\\" class=\\\"fullSize\\\"></div><div id=\\\"loadingOverlay\\\"><h1>Loading...</h1></div><div id=\\\"toolbar\\\"><div>Height</div><input type=\\\"range\\\" min=\\\"-100.0\\\" max=\\\"100.0\\\" step=\\\"1\\\" data-bind=\\\"value: height, valueUpdate: &#39;input&#39;\\\"><input type=\\\"text\\\" size=\\\"5\\\" data-bind=\\\"value: height\\\"></div>\", 3);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _hoisted_1;\n}","map":{"version":3,"mappings":";;;SACIA,UAAiD","names":["_hoisted_1"],"sourceRoot":"","sources":["C:\\Users\\DELL\\Desktop\\cx\\LearnCesium\\src\\components\\3Dtiles.vue"],"sourcesContent":["<template>\r\n    <div id=\"cesiumContainer\" class=\"fullSize\"></div>\r\n    <div id=\"loadingOverlay\"><h1>Loading...</h1></div>\r\n    <div id=\"toolbar\">\r\n      <div>Height</div>\r\n      <input type=\"range\" min=\"-100.0\" max=\"100.0\" step=\"1\" data-bind=\"value: height, valueUpdate: 'input'\">\r\n      <input type=\"text\" size=\"5\" data-bind=\"value: height\">\r\n    </div>\r\n    \r\n</template>\r\n<script setup>\r\nimport { onMounted } from \"vue\";\r\n\r\nonMounted(() => {\r\n  const viewer = new Cesium.Viewer(\"cesiumContainer\", {\r\n    homeButton: false,\r\n    animation: false,\r\n    navigationHelpButton: false,\r\n    baseLayerPicker: false,\r\n    timeline: false,\r\n    geocoder: false,\r\n    // sceneModePicker: false,\r\n    fullscreenButton: false,\r\n    // vrButton: true,\r\n  });\r\n  //显示帧率\r\n  viewer.scene.debugShowFramesPerSecond = true;\r\n  //加载3d tiles\r\n  var tileset = new Cesium.Cesium3DTileset({\r\n    url: \"./tileData/Scene/Production_5.json\", //数据路径\r\n    maximumScreenSpaceError: 2, //最大的屏幕空间误差\r\n    maximumNumberOfLoadedTiles: 1000, //最大加载瓦片个数\r\n    // modelMatrix: m, //形状矩阵\r\n  });\r\n  //创建平移矩阵方法一\r\n  // m = Cesium.Matrix4.fromArray([\r\n  // 1.0, 0.0, 0.0, 0.0,\r\n  // 0.0, 1.0, 0.0, 0.0,\r\n  // 0.0, 0.0, 1.0, 0.0,\r\n  // x, y, z, 1.0\r\n  // ]);\r\n\r\n    //创建平移矩阵方法二\r\n    // var translation = Cesium.Cartesian3.fromArray([0, 0, 0]);\r\n    // const m = Cesium.Matrix4.fromTranslation(translation);\r\n\r\n    // //生效\r\n    // tileset._modelMatrix = m;\r\n\r\n  tileset.readyPromise\r\n    .then(function (tileset) {\r\n      viewer.scene.primitives.add(tileset);\r\n     \r\n  \r\n      //移动到表面\r\n      const height = Number(i);\r\n      const cartographic = Cesium.Cartographic.fromCartesian(\r\n        tileset.boundingSphere.center\r\n      );\r\n      const surface = Cesium.Cartesian3.fromRadians(\r\n        cartographic.longitude,\r\n        cartographic.latitude,\r\n        0.0\r\n      );\r\n      const offset = Cesium.Cartesian3.fromRadians(\r\n        cartographic.longitude,\r\n        cartographic.latitude,\r\n        height\r\n      );\r\n      const translation = Cesium.Cartesian3.subtract(\r\n        offset,\r\n        surface,\r\n        new Cesium.Cartesian3()\r\n      );\r\n      tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\r\n   \r\n      viewer.zoomTo(\r\n        tileset,\r\n        // new Cesium.HeadingPitchRange(\r\n        //   0.0,\r\n        //   -0.5,\r\n        //   tileset.boundingSphere.radius * 2.0\r\n        // )\r\n      );\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n});\r\n</script>\r\n<style>\r\n      @import url(../templates/bucket.css);\r\n      #toolbar {\r\n        background: rgba(42, 42, 42, 0.8);\r\n        padding: 4px;\r\n        border-radius: 4px;\r\n      }\r\n      #toolbar input {\r\n        vertical-align: middle;\r\n        padding-top: 2px;\r\n        padding-bottom: 2px;\r\n      }\r\n    </style>\r\n   "]},"metadata":{},"sourceType":"module"}